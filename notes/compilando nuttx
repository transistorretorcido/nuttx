 Añadimos al path la toolchain seleccionada: 
 $ export PATH=/home/santiago/toolchains/gcc-arm-none-eabi-5_4-2016q3/bin/:$PATH
 $ export ARCH=arm
 $ export CROSS_COMPILE=arm-none-eabi-
 
 Luego creamos el directorio de trabajo:
 $ mkdir minuttx
 $ cd minuttx
 
 Clonamos a nuestro disco el codigo fuente de nuttx:
 $ git clone https://bitbucket.org/nuttx/nuttx
 
 Luego de las apps: 
 $ git clone https://bitbucket.org/nuttx/apps
 
 Y finalmente de las herramientas:
 $ git clone https://bitbucket.org/nuttx/tools
 
 Nos vamos a minuttx/tools 
 $ cd tools
 $ cd kconfig-frontend
 $ ./configure
 $ make
 # make install
 # ldconfig
 
 Ahora nos vamos a minuttx/nuttx/tools
 $ ./configure.sh stm32f103-minimum/nsh
 
 Si necesitamos configurar algo antes de compilar hacemos (en mi caso no fue necesario modificar algo)
 $ cd ..
 $ make menuconfig
 
 Finalmente minuttx/nuttx
 $ make
 
 Luego con opencd flasheamos el nuttx.bin creado en minuttx/nuttx
 
 en mi caso:
 
 ./openocd -f ~/eclipseC++/openocd/0.10.0-201601101000-dev/scripts/interface/stlink-v2.cfg
  -f ~/eclipseC++/openocd/0.10.0-201601101000-dev/scripts/target/stm32f1x.cfg -c init -c "reset halt" 
  -c "flash write_image erase /home/santiago/programacion/nuttxtt/nuttx/nuttx.bin 0x08000000"
  
Update 15/09/2017

  $ export PATH=/home/santiago/eclipseC++/openocd/0.10.0-201601101000-dev/bin:$PATH
 
 Update 18/09/2017 
 
	
 
 Con placa STM32F407G-DISC1 (DISCOVERY).
 *-Se descargó la última version de OpenOcd y se recompiló (no se instaló).
 *-Luego fue necesario modificar el archivo ../tcl/board/stm32f4discovery.cfg, y cambiar el modelo de 
 "STLINK-V2" A "STLINK-V2-1"
 *-Finalmente para flasher una imagen bin se lanzó el siguiente comando:
 ./openocd -s ../tcl -f ../tcl/board/stm32f4discovery.cfg
  -c "program /home/santiago/programacion/nuttx/nuttx/nuttx.bin exit 0x08000000"
  
Update 03/10/2017 ~ 04/05/18

Editar el siguiente fichero para expandir la memoria a 128KB
nano configs/stm32f103-minimum/scripts/ld.script

~/openocd/gnu-mcu-eclipse/0.10.0-5-20171110-1117/bin$ cp ../scripts/target/stm32f1x.cfg ../scripts/target/stm32f103.cfg
~/openocd/gnu-mcu-eclipse/0.10.0-5-20171110-1117/bin$ nano ../scripts/target/stm32f103.cfg

Modificamos la linea...
de: "flash bank $_FLASHNAME stm32f1x 0x08000000 0 0 0 $_TARGETNAME"
a: "flash bank $_FLASHNAME stm32f1x 0x08000000 0x20000 0 0 $_TARGETNAME"

Luego para flashear usamos la siguiente instruccion
~/openocd/gnu-mcu-eclipse/0.10.0-5-20171110-1117/bin$
	./openocd -f interface/stlink-v2.cfg -f target/stm32f103.cfg -c init -c "reset halt" -c "flash write_image erase /home/santiago/nuttx-workspace/nuttx/nuttx.bin 0x08000000"

12/05/18

Update flash discovery STM32F407

./openocd -f interface/stlink-v2-1.cfg -f target/stm32f4x.cfg -c init -c "reset halt"
 -c "flash write_image erase /home/santiago/nuttx-workspace/nuttx/nuttx.bin 0x08000000" -c "reset" -c "exit"
 
 19/06/2018
 
 Se migró a buildroot para crear el toolchain para la STm32F4, debido a problemas a la hora de compilar ELF o NXFLAT
 
 primero en:
 ~/nuttx-workspace 
 Clonamos :
 git clone https://bitbucket.org/nuttx/buildroot.git buildroot
 
 ver siguiente link para el ressto de la configuracion: http://reclonelabs.com/building-nuttx-in-ubuntu-from-scratch/
 
 export PATH=/home/santiago/nuttx-workspace/buildroot/build_arm_hf/staging_dir/bin:$PATH
 
 make menuconfig
 
 ingresar en:
    ->System Type->toolchain Selection-> buildroot(cygwin or linux) seleccionar
    ->System Type->FPU Support (seleccionar) (habilita el coma flotanto)
 

 
